# Generated by Django 4.2 on 2023-05-07 16:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'invalid': 'Username is incorrect.', 'unique': 'A user with that username already exists.'}, help_text='Required. 32 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=32, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(max_length=64, verbose_name='name')),
                ('last_name', models.CharField(max_length=128, verbose_name='surname')),
                ('phone_number', models.CharField(error_messages={'invalid': 'Phone number is incorrect.'}, help_text='Non-required. 7-15 characters valid number. Digits and + only.', max_length=16, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number should be a 7-15 characters valid number which starts with '+' sign.", regex='^[+]?[0-9]{7,15}$')], verbose_name='phone number')),
                ('email', models.EmailField(error_messages={'invalid': 'Email address is incorrect.', 'unique': 'A user with that email already exists.'}, help_text='Non-required. 256 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=256, unique=True, verbose_name='email')),
                ('vacancy', models.CharField(blank=True, max_length=256, verbose_name='vacancy')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='last login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MenuDish',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='dish name')),
                ('content', models.TextField(blank=True, verbose_name='description')),
                ('category', models.CharField(choices=[('soup', 'First dish'), ('main', 'Main dish'), ('meat', 'Meat'), ('garnish', 'Garnish'), ('salad', 'Salad'), ('dessert', 'Dessert'), ('hot_dr', 'Hot drink'), ('cold_dr', 'Cold drink'), ('alco', 'Alcohol'), ('add', 'Addition')], verbose_name='dish category')),
                ('price', models.DecimalField(decimal_places=2, max_digits=7, verbose_name='price')),
                ('weight', models.PositiveSmallIntegerField(blank=True, verbose_name='portion weight')),
                ('size', models.CharField(blank=True, max_length=3, verbose_name='portion size')),
                ('upload_time', models.DateTimeField(auto_now_add=True, verbose_name='upload datetime')),
            ],
            options={
                'verbose_name': 'dish',
                'verbose_name_plural': 'dishes',
            },
        ),
        migrations.CreateModel(
            name='RestAddresses',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city', models.CharField(max_length=64, verbose_name='city')),
                ('district', models.CharField(max_length=128, verbose_name='district')),
                ('street', models.CharField(max_length=256, verbose_name='street')),
                ('building_number', models.CharField(max_length=8, verbose_name='building number')),
                ('floor', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='floor number')),
                ('room', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='apartment number')),
            ],
            options={
                'verbose_name': 'address',
                'verbose_name_plural': 'addresses',
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 64 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=64, unique=True, verbose_name='name')),
                ('content', models.TextField(blank=True, verbose_name='description')),
                ('phone_number', models.CharField(error_messages={'invalid': 'Phone number is incorrect.'}, help_text='Required. 7-15 characters valid number. Digits and + only.', max_length=16, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number should be a 7-15 characters valid number which starts with '+' sign.", regex='^[+]?[0-9]{7,15}$')], verbose_name='phone number')),
                ('email', models.EmailField(blank=True, error_messages={'invalid': 'Email address is incorrect.', 'unique': 'A user with that email already exists.'}, help_text='Required. 256 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=256, unique=True, verbose_name='email')),
                ('upload_time', models.DateTimeField(auto_now_add=True, verbose_name='upload datetime')),
            ],
            options={
                'verbose_name': 'restaurant',
                'verbose_name_plural': 'restaurants',
            },
        ),
        migrations.CreateModel(
            name='WorkingHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], verbose_name='day')),
                ('from_hour', models.TimeField(verbose_name='start time')),
                ('to_hour', models.TimeField(verbose_name='end time')),
                ('rest_address', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='addr_working_hours', to='service.restaddresses')),
                ('restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='rest_working_hours', to='service.restaurant', to_field='name')),
            ],
            options={
                'verbose_name': 'restaurant working time',
                'verbose_name_plural': 'restaurants working time',
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.BooleanField(default=True, verbose_name='vote')),
                ('vote_time', models.DateTimeField(auto_now_add=True, verbose_name='vote datetime')),
                ('address', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='service.restaddresses')),
                ('menu', models.ManyToManyField(db_table='menu_vote', related_name='dishes', to='service.menudish')),
                ('restaurant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='restaurants', to='service.restaurant', to_field='name')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to=settings.AUTH_USER_MODEL, to_field='username')),
            ],
            options={
                'verbose_name': 'vote',
                'verbose_name_plural': 'votes',
            },
        ),
        migrations.AddField(
            model_name='restaddresses',
            name='restaurant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='service.restaurant', to_field='name'),
        ),
        migrations.AddField(
            model_name='menudish',
            name='restaurant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dishes', to='service.restaurant', to_field='name'),
        ),
    ]
